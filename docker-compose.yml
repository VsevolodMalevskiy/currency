version: "3.9"

# python ./app/manage.py runserver 0.0.0.0:8000

services:
  backend:
#    command: python ./app/manage.py runserver
    image: local
    build: .  # поиск образа не из docker-образов на сайте, а из Dockerfile
    container_name: backend
    stdin_open: true  # для возможности взаимодействия с консолью контейнера
    tty: true  # для возможности взаимодействия с консолью контейнера
    ports:
      - "8000:8000"  # связь вне контейнера по порту 8000 (для работы в браузере)
    depends_on:
      - postgres
      - rabbitmq
      - memcached

  celery:
    command: celery -A settings worker -l info -c 4
    image: local
    build: .
    container_name: celery
    stdin_open: true
    tty: true
    depends_on:
      - postgres
      - rabbitmq
      - memcached

  celerybeat:
    command: celery -A settings beat -l info
    image: local
    build: .
    container_name: celerybeat
    stdin_open: true
    tty: true
    depends_on:
      - postgres
      - rabbitmq
      - memcached

  memcached:
    image: memcached:1.6.9
    container_name: memcached
    ports:
      - "11211:11211"

  rabbitmq:
    image: rabbitmq:3.9-management  # только с версией managment
    container_name: rabbitmq
    env_file: .env  # для работы с файлом .env (имя и пароль)
    ports:
      - "5672:5672"
      - "15672:15672"

  postgres:
    image: postgres:15.2-alpine
    container_name: postgres
    env_file: .env
    ports:
      - "5432:5432"
    volumes:  # для того, чтобы после установки контейнеров база данных не удалялась
      - db_data:/var/lib/postgresql/data  # место хранения БД при остановленных контенерах

  nginx:
    image: nginx
    container_name: nginx
    depends_on:
      - backend
    ports:
      - "80:80"
    volumes:
      - "./default.conf:/etc/nginx/conf.d/default.conf:ro"

  pgadmin4:
    image: dpage/pgadmin4
    container_name: pgadmin4
    env_file: .env
    restart: always
#    environment:
#      PGADMIN_DEFAULT_EMAIL: admin@admin.com
#      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin

#  flower:
#    image: mher/flower
#    container_name:  flower
#    command: [ 'flower', '--broker=amqp://guest:guest@rabbitmq:5672', '--port=5555' ]
#    ports:
#      - "5557:5555"
#    depends_on:
#      - celery

  flower:
    restart: always
    image: mher/flower
    container_name:  flower
    command: celery flower -l INFO --persisten=True
    volumes:
      - flower_data:/data
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672
    ports:
      - "5555:5555"
    depends_on:
      - celery
      - rabbitmq

#celery:
#  image: celery:latest
#  container_name: celery
#  command: celery -A <project-name> worker -l INFO"
#flower:
# image: mher/flower
# container_name: flower
# command: celery flower --persisten=True
# environment:
#   - CELERY_BROKER_URL=http://my-broker-url
#   - FLOWER_PORT=8888
# ports:
# - 8888:8888 # docker will expose this ports
# voulumes:
# - flower_data:/data
#vloumes:
# flower_data # this will let docker know that we have added a custom volume

volumes:
  db_data: {}
  pgadmin-data:
  flower_data:
